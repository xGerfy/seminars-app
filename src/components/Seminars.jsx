import { useEffect, useState } from "react";

const Seminars = () => {
  // —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
  // —Å–ø–∏—Å–æ–∫ —Å–µ–º–∏–Ω–∞—Ä–æ–≤
  const [seminars, setSeminars] = useState([]);
  // –∑–∞–≥—Ä—É–∑–∫–∞
  const [loading, setLoading] = useState(true);
  // –æ—à–∏–±–∫–∞
  const [error, setError] = useState(null);
  // –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ–º–∏–Ω–∞—Ä–∞
  const [editingSeminar, setEditingSeminar] = useState(null);
  // –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const [modalVisible, setModalVisible] = useState(false);
  // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (json-server)
  useEffect(() => {
    fetch("http://localhost:3000/seminars")
      .then((response) => response.json())
      .then((data) => {
        setSeminars(data);
        setLoading(false);
      })
      .catch((err) => {
        setError(err);
        setLoading(false);
      });
  }, []);
  // —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–º–∏–Ω–∞—Ä–∞
  const deleteSeminar = (id) => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–µ–º–∏–Ω–∞—Ä?")) {
      fetch(`http://localhost:3000/seminars/${id}`, { method: "DELETE" })
        .then(() => {
          setSeminars(seminars.filter((seminar) => seminar.id !== id));
        })
        .catch((err) => setError(err));
    }
  };
  //–æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–º–∏–Ω–∞—Ä–∞
  const openEditModal = (seminar) => {
    setEditingSeminar(seminar);
    setModalVisible(true);
  };
  // –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
  const closeModal = () => {
    setModalVisible(false);
    setEditingSeminar(null);
  };
  // –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
  const handleModalClick = (event) => {
    if (event.target.className === "modal") {
      closeModal();
    }
  };
  // –∑–∞–ø—Ä–æ—Å –∫ –±–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–º–∏–Ω–∞—Ä–∞
  const handleEditSubmit = (event) => {
    event.preventDefault();
    const updatedSeminar = { ...editingSeminar };
    updatedSeminar.date = formatDate(updatedSeminar.date);
    fetch(`http://localhost:3000/seminars/${updatedSeminar.id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedSeminar),
    })
      .then(() => {
        setSeminars(
          seminars.map((seminar) =>
            seminar.id === updatedSeminar.id ? updatedSeminar : seminar
          )
        );
        closeModal();
      })
      .catch((err) => setError(err));
  };
  // –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—à–∏–±–∫–∞—Ö
  if (loading) return <div className="loader">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error)
    return (
      <div className="error">
        –û—à–∏–±–∫–∞: {error.message}. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢
      </div>
    );

  function formatDate(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0"); // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const year = date.getFullYear();

    return `${day}.${month}.${year}`;
  }

  // —Ä–µ–Ω–¥–µ—Ä
  return (
    <div className="container">
      <h1>–°–µ–º–∏–Ω–∞—Ä—ã</h1>
      <ul>
        {seminars.map((seminar) => (
          <li key={seminar.id}>
            <img src={seminar.photo} alt={seminar.title} />
            <div>
              <div>
                <h2>{seminar.title}</h2>
                <p>{seminar.description}</p>
              </div>
              <div>
                <p>–î–∞—Ç–∞: {seminar.date}</p>
                <p>–í—Ä–µ–º—è: {seminar.time}</p>
              </div>
            </div>
            <div>
              <button onClick={() => deleteSeminar(seminar.id)}>–£–¥–∞–ª–∏—Ç—å</button>
              <button onClick={() => openEditModal(seminar)}>
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
          </li>
        ))}
      </ul>
      {/* –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      {modalVisible && (
        <div className="modal" onClick={handleModalClick}>
          <form onSubmit={handleEditSubmit}>
            <input
              type="text"
              value={editingSeminar.title}
              onChange={(e) =>
                setEditingSeminar({ ...editingSeminar, title: e.target.value })
              }
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º–∏–Ω–∞—Ä–∞"
            />
            <input
              type="text"
              value={editingSeminar.description}
              onChange={(e) =>
                setEditingSeminar({
                  ...editingSeminar,
                  description: e.target.value,
                })
              }
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–º–∏–Ω–∞—Ä–∞"
            />
            <input
              type="date"
              value={editingSeminar.date}
              onChange={(e) =>
                setEditingSeminar({ ...editingSeminar, date: e.target.value })
              }
            />
            <input
              type="time"
              value={editingSeminar.time}
              onChange={(e) =>
                setEditingSeminar({ ...editingSeminar, time: e.target.value })
              }
            />
            <input
              type="text"
              value={editingSeminar.photo}
              onChange={(e) =>
                setEditingSeminar({ ...editingSeminar, photo: e.target.value })
              }
              placeholder="URL —Ñ–æ—Ç–æ"
            />
            <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button type="button" onClick={closeModal}>
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </form>
        </div>
      )}
    </div>
  );
};

export default Seminars;
